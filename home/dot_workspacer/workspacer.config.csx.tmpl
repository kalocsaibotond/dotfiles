{{-
$install_paths := (list )
-}}
{{- /* Installation priority list, assuming standard installations */ -}}
{{- 
$install_paths := append $install_paths ( joinPath
    .chezmoi.homeDir
    "scoop"
    "apps"
    "workspacer"
    "current"
    )
-}}
{{- 
$install_paths := append $install_paths ( joinPath
    (env "PROGRAMDATA")
    "scoop"
    "apps"
    "workspacer"
    "current"
)
-}}
{{- 
$install_paths := append $install_paths ( joinPath
    (env "LOCALAPPDATA")
    "Microsoft"
    "Winget"
    "Packages"
    "Workspacer"

)
-}}
{{- 
$install_paths := append $install_paths ( joinPath
    (env "ProgramFiles")
    "Winget"
    "Packages"
    "Workspacer"
)
-}}
{{- $workpacer_dir := "." -}}
{{- range $install_path := $install_paths -}}
{{-     if isExecutable (joinPath $install_path "workspacer.exe") -}}
{{-         $workpacer_dir = $install_path -}}
{{-         break -}}
{{-     end -}}
{{- end -}}
#r "{{- $workpacer_dir -}}\workspacer.Shared.dll"
#r "{{- $workpacer_dir -}}\plugins\workspacer.Bar\workspacer.Bar.dll"
#r "{{- $workpacer_dir -}}\plugins\workspacer.ActionMenu\workspacer.ActionMenu.dll"
#r "{{- $workpacer_dir -}}\plugins\workspacer.FocusIndicator\workspacer.FocusIndicator.dll"


using System;
using workspacer;
using workspacer.Bar;
using workspacer.Bar.Widgets;
using workspacer.ActionMenu;
using workspacer.FocusIndicator;


Action<IConfigContext> doConfig = (context) =>
{
    // Uncomment to switch update branch (or to disable updates)
    //context.Branch = Branch.None;

    /* Variables */
    var fontSize = 9;
    var barHeight = 19;
    var fontName = "Cascadia Code PL";
    var background = new Color(0x0, 0x0, 0x0);

    /* Bar */
    context.AddBar(
        new BarPluginConfig()
        {
            FontSize = fontSize,
            BarHeight = barHeight,
            FontName = fontName,
            DefaultWidgetBackground = background,
            LeftWidgets = () => new IBarWidget[]
            {
                new WorkspaceWidget(),
                new TextWidget(": "),
                new TitleWidget() {
                    IsShortTitle = true
                }
            },
            RightWidgets = () => new IBarWidget[]
            {
                new BatteryWidget(),
                new TimeWidget(1000, "HH:mm:ss dd-MMM-yyyy"),
                new ActiveLayoutWidget(),
            }
        }
    );

    /* Bar focus indicator */
    context.AddFocusIndicator();

    /* Action menu */
    var actionMenu = context.AddActionMenu(
        new ActionMenuPluginConfig()
        {
            MenuHeight = barHeight,
            FontSize = fontSize,
            FontName = fontName,
            Background = background,
        }
    );

    /* Workspaces */
    context.WorkspaceContainer.CreateWorkspaces(
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9"
    );
    context.CanMinimizeWindows = true; // false by default
};
return doConfig;
